"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Rooms_1 = require("../models/Rooms");
var Viewer_1 = require("../models/Viewer");
/** Client to call Rooms schema and mutation for rooms */
var RoomsClient = /** @class */ (function () {
    /** @ignore */
    function RoomsClient(client) {
        this.client = client;
    }
    /**
     * Get a room.
     *
     * ```typescript
     * client.rooms.get(['id'], 'xxxxxxxxxxxx').then(v => {
     *   console.log(v)
     * })
     * ```
     *
     * @param fields Array of [[Room]] key names. Returns specified fields as result.
     * @param id Room id.
     * @param option
     */
    RoomsClient.prototype.get = function (fields, id, option) {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var result, data;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.client.query({
                            viewer: Viewer_1.buildViewerQuery(['id'], {
                                rooms: { fields: fields, args: { input: { where: { id: id } } }, with: option }
                            })
                        })];
                    case 1:
                        result = _c.sent();
                        data = ((_b = (_a = result.data.viewer.rooms) === null || _a === void 0 ? void 0 : _a.edges[0]) === null || _b === void 0 ? void 0 : _b.node) || null;
                        if (!data) {
                            throw new Error("not found room: " + id);
                        }
                        return [2 /*return*/, { errors: result.errors, data: data }];
                }
            });
        });
    };
    /**
     * Get list of rooms.
     *
     * ```typescript
     * client.rooms.list(['id']).then(v => {
     *   console.log(result)
     * })
     * ```
     *
     * @param fields Array of [[Room]] key names. Returns specified fields as result.
     * @param args
     * @param option
     */
    RoomsClient.prototype.list = function (fields, args, option) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var result;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.query({
                            viewer: Viewer_1.buildViewerQuery(['id'], {
                                rooms: { fields: fields, args: args, with: option }
                            })
                        })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, {
                                errors: result.errors,
                                data: result.errors ? null : result.data.viewer.rooms
                            }];
                }
            });
        });
    };
    /**
     * Create new room.
     *
     * ```typescript
     * client.rooms.create(['id'], { data: {
     *   name: 'newRoom',
     *   description: 'description'
     * }}).then(v => {
     *   console.log(v)
     * })
     * ```
     *
     * If you want to change "exit room" link url to be along with your own application, you can update it by `exitRoomLink`.
     *
     * ```typescript
     * client.rooms.create(['id'], {
     *   data: {
     *     name: 'newRoom',
     *     description: 'description',
     *     exitRoomLink: 'https://yourown.application.com'
     *   }
     * })
     * ```
     *
     * @param fields Array of [[Room]] key names. Returns specified fields as result.
     * @param args
     * @param option
     */
    RoomsClient.prototype.create = function (fields, args, option) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var result;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.client.mutate(Rooms_1.buildCreateRoomMutation(fields, args, option))];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, {
                                errors: result.errors,
                                data: result.errors ? null : ((_a = result.data) === null || _a === void 0 ? void 0 : _a.createRoom) || null
                            }];
                }
            });
        });
    };
    /**
     * Delete a room.
     *
     * ```typescript
     * client.rooms.delete(['id'], { id: 'xxxxxxxxxxxx' }).then(v => {
     *   console.log(v)
     * })
     * ```
     *
     * @param fields Array of [[Room]] key names. Returns specified fields as result.
     * @param args
     */
    RoomsClient.prototype.delete = function (fields, args) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var result;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.client.mutate(Rooms_1.buildDeleteRoomMutation(fields, args))];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, {
                                errors: result.errors,
                                data: result.errors ? null : ((_a = result.data) === null || _a === void 0 ? void 0 : _a.deleteRoom) || null
                            }];
                }
            });
        });
    };
    return RoomsClient;
}());
exports.RoomsClient = RoomsClient;
//# sourceMappingURL=Rooms.js.map