import { ApolloClient, ApolloQueryResult } from 'apollo-client';
import { NormalizedCacheObject } from 'apollo-cache-inmemory';
import { FetchResult } from 'apollo-link';
import { GraphQLError } from 'graphql';
import { RoomsClient } from './Rooms';
import { RolesClient } from './Roles';
import { ViewerClient } from './Viewer';
import { OrganizationMembersClient } from './OrganizationMembers';
import { RoomMembersClient } from './RoomMembers';
import { InvitatationsClient } from './Invitations';
import { BillingClient } from './Billing';
export declare type Result<R> = {
    errors: readonly GraphQLError[] | undefined;
    data: R | null;
};
/**
 * The ClassDoAPIClient class encapsulates all logics to call ClassDo APIs from client side.
 */
export declare class ClassDoAPIClient {
    private client;
    /** Client to call Viewer schema */
    organization: ViewerClient;
    /** Client to call Rooms schema and mutation for rooms */
    rooms: RoomsClient;
    /** Client to call Roles schema */
    roles: RolesClient;
    /** Client to call OrganizatoinMembers schema */
    organizationMembers: OrganizationMembersClient;
    /** Client to call RoomMembers schema */
    roomMembers: RoomMembersClient;
    /** Client to call mutation for invitations */
    invitatoins: InvitatationsClient;
    /** Client to call Billing schema */
    billing: BillingClient;
    /**
     * The ClassDoAPIClient constructor
     *
     * ```typescript
     * const client = new ClassDoAPIClient({ apiKey: 'xxxxxxxxxxxx' })
     * client.viewer.get(['id'], { rooms: { fields: ['id', 'name'] }}).then(v => {
     *   console.log(v)
     * })
     * ```
     *
     * @param params apiKey: API Key to call ClassDo public API.
     */
    constructor(params: {
        apiKey: string;
    });
    /**
    * Alias for [[organization]] property.
    */
    get viewer(): ViewerClient;
    getClient(): ApolloClient<NormalizedCacheObject>;
    query<R>(src: R): Promise<ApolloQueryResult<R>>;
    mutate<R>(src: R): Promise<FetchResult<R>>;
}
