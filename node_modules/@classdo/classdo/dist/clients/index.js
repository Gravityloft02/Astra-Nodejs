"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var apollo_client_1 = require("apollo-client");
var node_fetch_1 = tslib_1.__importDefault(require("node-fetch"));
var apollo_link_http_1 = require("apollo-link-http");
var apollo_cache_inmemory_1 = require("apollo-cache-inmemory");
var apollo_link_1 = require("apollo-link");
var apollo_link_context_1 = require("apollo-link-context");
var apollo_link_error_1 = require("apollo-link-error");
var graphql_tag_1 = tslib_1.__importDefault(require("graphql-tag"));
var typed_graphqlify_1 = require("typed-graphqlify");
var Rooms_1 = require("./Rooms");
var Roles_1 = require("./Roles");
var Viewer_1 = require("./Viewer");
var OrganizationMembers_1 = require("./OrganizationMembers");
var RoomMembers_1 = require("./RoomMembers");
var Invitations_1 = require("./Invitations");
var Billing_1 = require("./Billing");
/** @ignore */
var url = process.env.CLASSDO_API_URL || 'https://api.classdo.com/graphql';
/**
 * @ignore
 */
function createLink(endpoint, getTokenCb) {
    var httpLink = new apollo_link_http_1.HttpLink({ uri: endpoint, fetch: node_fetch_1.default });
    var authMiddleware = apollo_link_context_1.setContext(function (_operation, _a) {
        var headers = _a.headers;
        return { headers: tslib_1.__assign(tslib_1.__assign({}, headers), { 'x-api-key': getTokenCb() }) };
    });
    var errorLink = apollo_link_error_1.onError(function (_a) {
        var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError;
        if (graphQLErrors) {
            graphQLErrors.map(function (_a) {
                var message = _a.message, locations = _a.locations, path = _a.path;
                var errlog = "[GraphQL error: " + endpoint + "]: Message: " + message + ", Location: " + JSON.stringify(locations) + ", Path: " + path;
                console.error(errlog);
            });
        }
        if (networkError) {
            var errlog = "[Network error]: " + networkError;
            console.error(errlog);
        }
    });
    return apollo_link_1.from([authMiddleware, errorLink, httpLink]);
}
/**
 * @ignore
 */
function createClient(apiKey) {
    var capellaLink = createLink(url, function () { return apiKey; });
    var capellaCache = new apollo_cache_inmemory_1.InMemoryCache();
    var capellaClient = new apollo_client_1.ApolloClient({
        link: capellaLink,
        cache: capellaCache,
        connectToDevTools: true
    });
    return capellaClient;
}
/**
 * The ClassDoAPIClient class encapsulates all logics to call ClassDo APIs from client side.
 */
var ClassDoAPIClient = /** @class */ (function () {
    /**
     * The ClassDoAPIClient constructor
     *
     * ```typescript
     * const client = new ClassDoAPIClient({ apiKey: 'xxxxxxxxxxxx' })
     * client.viewer.get(['id'], { rooms: { fields: ['id', 'name'] }}).then(v => {
     *   console.log(v)
     * })
     * ```
     *
     * @param params apiKey: API Key to call ClassDo public API.
     */
    function ClassDoAPIClient(params) {
        this.client = createClient(params.apiKey);
        this.organization = new Viewer_1.ViewerClient(this);
        this.rooms = new Rooms_1.RoomsClient(this);
        this.roles = new Roles_1.RolesClient(this);
        this.organizationMembers = new OrganizationMembers_1.OrganizationMembersClient(this);
        this.roomMembers = new RoomMembers_1.RoomMembersClient(this);
        this.invitatoins = new Invitations_1.InvitatationsClient(this);
        this.billing = new Billing_1.BillingClient(this);
    }
    Object.defineProperty(ClassDoAPIClient.prototype, "viewer", {
        /**
        * Alias for [[organization]] property.
        */
        get: function () { return this.organization; },
        enumerable: true,
        configurable: true
    });
    ClassDoAPIClient.prototype.getClient = function () {
        return this.client;
    };
    ClassDoAPIClient.prototype.query = function (src) {
        return this.getClient().query({ query: graphql_tag_1.default(typed_graphqlify_1.query(src)), fetchPolicy: 'network-only' });
    };
    ClassDoAPIClient.prototype.mutate = function (src) {
        return this.getClient().mutate({ mutation: graphql_tag_1.default(typed_graphqlify_1.mutation(src)), fetchPolicy: 'no-cache' });
    };
    return ClassDoAPIClient;
}());
exports.ClassDoAPIClient = ClassDoAPIClient;
//# sourceMappingURL=index.js.map