import { ViewerBillingArgs } from '../generated/graphql';
import { UserKeys, UserResult, UserOption } from './Users';
import { RoomKeys, RoomResult } from './Rooms';
import { UserProfileKeys } from './UserProfiles';
import { EmailKeys } from './Emails';
export declare const UsageLedger: {
    id: string;
    ledgerType: string;
    paidSec: number;
    timestamp: string;
    amount: number;
};
export declare type UsageLedgerType = typeof UsageLedger;
export declare type UsageLedgerKeys = keyof UsageLedgerType;
export declare type UsageLedgerResult<UL extends UsageLedgerKeys, U extends UserKeys | null = null, U_P extends UserProfileKeys | null = null, U_P_E extends EmailKeys | null = null, R extends RoomKeys | null = null> = Pick<UsageLedgerType, UL> & ([U] extends [UserKeys] ? {
    user: UserResult<U, U_P, U_P_E>;
} : {}) & ([R] extends [RoomKeys] ? {
    room: RoomResult<R>;
} : {});
export declare type UsageLedgerOption<U, U_P, U_P_E, R> = {
    user?: {
        fields: U[];
        with?: UserOption<U_P, U_P_E>;
    };
    room?: {
        fields: R[];
    };
};
export declare const BillingRecord: {
    id: string;
    date: string;
};
export declare type BillingRecordType = typeof BillingRecord;
export declare type BillingRecordKeys = keyof BillingRecordType;
export declare type BillingRecordResult<BR extends BillingRecordKeys, UL extends UsageLedgerKeys | null, UL_U extends UserKeys | null, UL_U_P extends UserProfileKeys | null, UL_U_P_E extends EmailKeys | null, UL_R extends RoomKeys | null, FUL extends UsageLedgerKeys | null, TUL extends UsageLedgerKeys | null> = Pick<BillingRecordType, BR> & ([UL] extends [UsageLedgerKeys] ? {
    usages: UsageLedgerResult<UL, UL_U, UL_U_P, UL_U_P_E, UL_R>[];
} : {}) & ([FUL] extends [UsageLedgerKeys] ? {
    freeCredits: UsageLedgerResult<FUL>[];
} : {}) & ([TUL] extends [UsageLedgerKeys] ? {
    topups: UsageLedgerResult<TUL>[];
} : {});
export declare type BillingRecordOption<UL, UL_U, UL_U_P, UL_U_P_E, UL_R, FUL, TUL> = {
    usages?: {
        fields: UL[];
        with?: UsageLedgerOption<UL_U, UL_U_P, UL_U_P_E, UL_R>;
    };
    freeCredits?: {
        fields: FUL[];
    };
    topups?: {
        fields: TUL[];
    };
};
export declare const Billing: {
    id: string;
    year: number;
    month: number;
};
export declare type BillingType = typeof Billing;
export declare type BillingKeys = keyof BillingType;
export declare type BillingResult<B extends BillingKeys, BR extends BillingRecordKeys | null, BR_UL extends UsageLedgerKeys | null, BR_UL_U extends UserKeys | null, BR_UL_U_P extends UserProfileKeys | null, BR_UL_U_P_E extends EmailKeys | null, BR_UL_R extends RoomKeys | null, BR_FUL extends UsageLedgerKeys | null, BR_TUL extends UsageLedgerKeys | null> = Pick<BillingType, B> & ([BR] extends [BillingRecordKeys] ? {
    records: BillingRecordResult<BR, BR_UL, BR_UL_U, BR_UL_U_P, BR_UL_U_P_E, BR_UL_R, BR_FUL, BR_TUL>[];
} : {});
export declare type BillingOption<BR, BR_UL, BR_UL_U, BR_UL_U_P, BR_UL_U_P_E, BR_UL_R, BR_FUL, BR_TUL> = {
    records?: {
        fields: BR[];
        with?: BillingRecordOption<BR_UL, BR_UL_U, BR_UL_U_P, BR_UL_U_P_E, BR_UL_R, BR_FUL, BR_TUL>;
    };
};
export declare function buildBillingQuery<B extends BillingKeys, BR extends BillingRecordKeys | null, BR_UL extends UsageLedgerKeys | null, BR_UL_U extends UserKeys | null, BR_UL_U_P extends UserProfileKeys | null, BR_UL_U_P_E extends EmailKeys | null, BR_UL_R extends RoomKeys | null, BR_FUL extends UsageLedgerKeys | null, BR_TUL extends UsageLedgerKeys | null>(fields: B[], args: ViewerBillingArgs, option?: BillingOption<BR, BR_UL, BR_UL_U, BR_UL_U_P, BR_UL_U_P_E, BR_UL_R, BR_FUL, BR_TUL>): any;
