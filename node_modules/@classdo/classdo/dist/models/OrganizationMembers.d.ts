import { OrganizationMembersArgs } from '../generated/graphql';
import { Connection } from './Connection';
import { UserKeys, UserResult, UserOption } from './Users';
import { UserProfileKeys } from './UserProfiles';
import { OrganizationMemberRoleKeys, OrganizationMemberRoleResult } from './OrganizationMemberRoles';
import { EmailKeys } from './Emails';
export declare const OrganizationMember: {
    id: string;
};
export declare type OrganizationMemberType = typeof OrganizationMember;
export declare type OrganizationMemberKeys = keyof OrganizationMemberType;
export declare type OrganizationMemberResult<OM extends OrganizationMemberKeys | null, U extends UserKeys | null, U_UP extends UserProfileKeys | null, U_UP_E extends EmailKeys | null, OMR extends OrganizationMemberRoleKeys | null> = ([OM] extends [OrganizationMemberKeys] ? Pick<OrganizationMemberType, OM> : {}) & ([U] extends [UserKeys] ? {
    user: UserResult<U, U_UP, U_UP_E>;
} : {}) & ([OMR] extends [OrganizationMemberRoleKeys] ? {
    role: OrganizationMemberRoleResult<OMR>;
} : {});
export declare type OrganizationMembersResult<OM extends OrganizationMemberKeys | null, U extends UserKeys | null, U_UP extends UserProfileKeys | null, U_UP_E extends EmailKeys | null, OMR extends OrganizationMemberRoleKeys | null> = Connection<OrganizationMemberResult<OM, U, U_UP, U_UP_E, OMR>>;
export declare type OrganizationMembersOption<U, U_UP, U_UP_E, OMR> = {
    user?: {
        fields: U[];
        with?: UserOption<U_UP, U_UP_E>;
    };
    role?: {
        fields: OMR[];
    };
};
/**
 * @ignore
 */
export declare function buildOrganizationMembersQuery<OM extends OrganizationMemberKeys, U extends UserKeys | null, U_UP extends UserProfileKeys | null, U_UP_E extends EmailKeys | null, OMR extends OrganizationMemberRoleKeys | null>(fields: OM[], args?: OrganizationMembersArgs | undefined | null, option?: OrganizationMembersOption<U, U_UP, U_UP_E, OMR>): OrganizationMembersResult<OM, U, U_UP, U_UP_E, OMR>;
