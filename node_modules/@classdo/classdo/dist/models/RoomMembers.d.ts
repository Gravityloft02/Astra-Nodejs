import { RoomMembersArgs, MutationAddRoomMembersArgs, MutationDeleteRoomMemberArgs } from '../generated/graphql';
import { Connection } from './Connection';
import { UserKeys, UserResult, UserOption } from './Users';
import { UserProfileKeys } from './UserProfiles';
import { EmailKeys } from './Emails';
export declare const RoomMember: {
    id: string;
};
export declare type RoomMemberType = typeof RoomMember;
export declare type RoomMemberKeys = keyof RoomMemberType;
export declare type RoomMemberResult<RM extends RoomMemberKeys, U extends UserKeys | null = null, U_UP extends UserProfileKeys | null = null, U_UP_E extends EmailKeys | null = null> = Pick<RoomMemberType, RM> & ([U] extends [UserKeys] ? {
    user: UserResult<U, U_UP, U_UP_E>;
} : {});
export declare type RoomMembersResult<RM extends RoomMemberKeys, U extends UserKeys | null, U_UP extends UserProfileKeys | null, U_UP_E extends EmailKeys | null> = Connection<RoomMemberResult<RM, U, U_UP, U_UP_E>>;
export declare type RoomMembersOption<U, U_UP, U_UP_E> = {
    user?: {
        fields: U[];
        with?: UserOption<U_UP, U_UP_E>;
    };
};
/**
 * @ignore
 */
export declare function buildRoomMembersQuery<RM extends RoomMemberKeys, U extends UserKeys | null, U_UP extends UserProfileKeys | null, U_UP_E extends EmailKeys | null>(fields: RM[], args?: RoomMembersArgs | undefined | null, option?: RoomMembersOption<U, U_UP, U_UP_E>): RoomMembersResult<RM, U, U_UP, U_UP_E>;
/**
 * @ignore
 */
export declare function buildAddRoomMembersMutation<RM extends RoomMemberKeys, U extends UserKeys | null, U_UP extends UserProfileKeys | null, U_UP_E extends EmailKeys | null>(fields: RM[], args: MutationAddRoomMembersArgs, option?: RoomMembersOption<U, U_UP, U_UP_E>): {
    addRoomMembers: RoomMemberResult<RM, U, U_UP, U_UP_E>[];
};
/**
 * @ignore
 */
export declare function buildDeleteRoomMemberMutation<RM extends RoomMemberKeys>(fields: RM[], args: MutationDeleteRoomMemberArgs): {
    deleteRoomMember: RoomMemberResult<RM>;
};
