"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var typed_graphqlify_1 = require("typed-graphqlify");
var Organizations_1 = require("./Organizations");
var RoomMembers_1 = require("./RoomMembers");
var Utils_1 = require("../Utils");
exports.Room = {
    id: typed_graphqlify_1.types.string,
    name: typed_graphqlify_1.types.string,
    description: typed_graphqlify_1.types.string
};
/**
 * @ignore
 */
var buildRoomEdge = function (room) { return ({
    node: room,
    cursor: typed_graphqlify_1.types.string
}); };
/**
 * @ignore
 */
var buildRooms = function (args, room) {
    var rooms = {
        totalCount: typed_graphqlify_1.types.number,
        pageInfo: {
            hasNextPage: typed_graphqlify_1.types.boolean,
            hasPreviousPage: typed_graphqlify_1.types.boolean,
            startCursor: typed_graphqlify_1.types.optional.string,
            endCursor: typed_graphqlify_1.types.optional.string
        },
        edges: [buildRoomEdge(room)]
    };
    return args ? typed_graphqlify_1.params(Utils_1.preprocessArgs(args), rooms) : rooms;
};
/**
 * @ignore
 */
function resolveOption(option) {
    var org = option.organization
        ? { organization: Organizations_1.buildOrganizationQuery(option.organization.fields) }
        : {};
    var members = option.members
        ? {
            members: RoomMembers_1.buildRoomMembersQuery(option.members.fields, option.members.args, option.members.with || {})
        }
        : {};
    return tslib_1.__assign(tslib_1.__assign({}, org), members);
}
/**
 * @ignore
 */
function buildRoomQuery(fields, option) {
    var pickedFields = Utils_1.pick(exports.Room, fields);
    var resolvedOption = option ? resolveOption(option) : {};
    return tslib_1.__assign(tslib_1.__assign({}, pickedFields), resolvedOption);
}
exports.buildRoomQuery = buildRoomQuery;
/**
 * @ignore
 */
function buildRoomsQuery(fields, args, option) {
    var pickedFields = Utils_1.pick(exports.Room, fields);
    var resolvedOption = option ? resolveOption(option) : {};
    return buildRooms(args, tslib_1.__assign(tslib_1.__assign({}, pickedFields), resolvedOption));
}
exports.buildRoomsQuery = buildRoomsQuery;
/**
 * @ignore
 */
function buildCreateRoomMutation(fields, args, option) {
    var pickedFields = Utils_1.pick(exports.Room, fields);
    var resolvedOption = option ? resolveOption(option) : {};
    return {
        createRoom: typed_graphqlify_1.params(Utils_1.preprocessArgs(args), tslib_1.__assign(tslib_1.__assign({}, pickedFields), resolvedOption))
    };
}
exports.buildCreateRoomMutation = buildCreateRoomMutation;
/**
 * @ignore
 */
function buildDeleteRoomMutation(fields, args) {
    var pickedFields = Utils_1.pick(exports.Room, fields);
    return {
        deleteRoom: typed_graphqlify_1.params(Utils_1.preprocessArgs(args), tslib_1.__assign({}, pickedFields))
    };
}
exports.buildDeleteRoomMutation = buildDeleteRoomMutation;
//# sourceMappingURL=Rooms.js.map