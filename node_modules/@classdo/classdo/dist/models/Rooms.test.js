"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Rooms_1 = require("./Rooms");
var TestUtils_1 = require("../TestUtils");
var typed_graphqlify_1 = require("typed-graphqlify");
describe('buildRoomQuery', function () {
    it('should build a query', function () {
        var result = Rooms_1.buildRoomQuery(['id', 'name']);
        TestUtils_1.compareGraphqlQuery(typed_graphqlify_1.query(result), "\n      query {\n        id\n        name\n      }\n    ");
    });
    it('should build a query with option', function () {
        var result = Rooms_1.buildRoomQuery(['id', 'name'], { organization: { fields: ['id'] } });
        TestUtils_1.compareGraphqlQuery(typed_graphqlify_1.query(result), "\n      query {\n        id\n        name\n        organization {\n          id\n        }\n      }\n    ");
    });
});
describe('buildRoomsQuery', function () {
    it('should build a query', function () {
        var result = Rooms_1.buildRoomsQuery(['id']);
        TestUtils_1.compareGraphqlQuery(typed_graphqlify_1.query(result), "\n      query {\n        totalCount\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n          }\n          cursor\n        }  \n      }\n    ");
    });
    it('should build a query with args', function () {
        var result = Rooms_1.buildRoomsQuery(['id'], {
            input: { where: { name: 'testRoom' } }
        });
        TestUtils_1.compareGraphqlQuery(typed_graphqlify_1.query(result), "\n      query(input: { where: { name: \"testRoom\" } }) {\n        totalCount\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n          }\n          cursor\n        }  \n      }\n    ");
    });
    it('should build a query with option', function () {
        var result = Rooms_1.buildRoomsQuery(['id'], null, {
            organization: { fields: ['name'] }
        });
        TestUtils_1.compareGraphqlQuery(typed_graphqlify_1.query(result), "\n      query {\n        totalCount\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            organization {\n              name\n            }\n          }\n          cursor\n        }  \n      }\n    ");
    });
});
describe('buildCreateRoomMutation', function () {
    var result = Rooms_1.buildCreateRoomMutation(['id'], {
        data: { name: 'testRoom', description: 'testDescription' }
    });
    TestUtils_1.compareGraphqlQuery(typed_graphqlify_1.mutation(result), "\n    mutation {\n      createRoom(data: { name: \"testRoom\", description: \"testDescription\" }) {\n        id\n      }\n    }\n  ");
});
describe('buildDeleteRoomMutation', function () {
    var result = Rooms_1.buildDeleteRoomMutation(['id'], { id: 'testRoomId' });
    TestUtils_1.compareGraphqlQuery(typed_graphqlify_1.mutation(result), "\n    mutation {\n      deleteRoom(id: \"testRoomId\") {\n        id\n      }\n    }\n  ");
});
//# sourceMappingURL=Rooms.test.js.map