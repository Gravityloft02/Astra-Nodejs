import { UserProfileKeys, UserProfileOption, UserProfileResult } from './UserProfiles';
import { EmailKeys } from './Emails';
export declare const User: {
    id: string;
};
export declare type UserType = typeof User;
export declare type UserKeys = keyof UserType;
export declare type UserResult<U extends UserKeys | null, UP extends UserProfileKeys | null, UP_E extends EmailKeys | null> = ([U] extends [UserKeys] ? Pick<UserType, U> : {}) & ([UP] extends [UserProfileKeys] ? {
    profile: UserProfileResult<UP, UP_E>;
} : {});
export declare type UserOption<UP, E> = {
    profile?: {
        fields: UP[];
        with?: UserProfileOption<E>;
    };
};
/**
 * @ignore
 */
export declare function buildUserQuery<U extends UserKeys, UP extends UserProfileKeys | null, UP_E extends EmailKeys | null>(fields: U[], option?: UserOption<UP, UP_E>): UserResult<U, UP, UP_E>;
